1. Explain what Hash tables are, why they are important and their use cases in real world
scenarios? (10 points)
        DS to store key value pairs
        Improve the search - O(1) or O(n)
        Quick acceess of large data, make the search easier 

        Insert 5,25

        key % 10

        5 % 10 = 5
        6 % 10 = 6  

        indices 0 1 2 3 4 5 6 7 8 9 
        values            5 6 


2. Explain DAT (Direct access tables) and its limitations over Hash tables? (10 points)
        DAT - Fixed number of keys
        Need to guess the size before hand
        colisions are not managed

        indices 1 2 3 4 5 6 ........... 1000
        values  1                       1000


3. What are collisions and explain collision resolution techniques (only probing, both
Linear and Quadratic Probing)? (10 points)
    h(x) + f(i)
        23, 43, 13, and 27"
        23  -> (23 % 10 = 3) = 3
        43 -> 3 (43 % 10 = 3) = 3 -> 4 = 4
        13 -> 3 (13 % 10 = 3) -> 3 -> 4 -> 5 = 5
        27 -> 7 (27 % 10 = 7) = 7


        indices 0 1 2  3  4  5  6  7  8  9
        values         23 43 13    27
    h(x) + f(i ^ 2)

    5, 15, 23, 43, 13, and 27

    5 (5 % 10 = 5) = 5
    5 (15 % 10 = 5) -> 5 -> 6 (5 + 1^2) = 6
    3 (23 % 10 = 3) = 3
    3 (43 % 10 = 3) -> 3 -> 4 (3 + 1^2) = 4
    3 (13 % 10 = 3) -> 3 ->  4 (3 + 1^2) -> 7 (3 + 2^2) = 7
    7 (27 % 10 = 7) -> 7 -> 8 (7 + 1^2) = 8

    indices 0  1  2  3   4   5  6  7  8  9  10
    values           23  43  5  15 13 28

        



class HashTable {
private:
    int *table; // Pointer to the hash table
    int size; // Size of the hash table

    // Hash function to calculate index
    int hashFunction(int key) {
        return key % size;
    }
}

public:{
    HashTable(int tableSize);
    ~HashTable();
    void insert(int key);
    int search(int key);
}

// Create Hasgtable
HashTable ht(TABLE_SIZE);

// Insert some keys
ht.insert(23);

// Search for keys
ht.search(key);